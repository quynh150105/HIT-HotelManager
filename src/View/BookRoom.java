
package View;

import Model.Bill;
import Model.Booking;
import Model.Room;
import Model.User;
import dao.BillDAO;
import dao.BookingDAO;
import dao.RoomDAO;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class BookRoom extends javax.swing.JFrame {
    private static User currentUser;
    private static Room room;
    private static DefaultTableModel tableModel;
    
    
    public BookRoom(User currentUser, Room room) {
        this.currentUser = currentUser;
        this.room = room;
        this.setUndecorated(true);
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        
        tableModel = new DefaultTableModel() {
        @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho phép chỉnh sửa ô nào trong bảng
            }
        };
        tableModel.setColumnIdentifiers(new String[]{"id","Number","Type","Price","Status"});
        tableRoom.setModel(tableModel);
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LbFindRoom = new javax.swing.JLabel();
        OptionRoom = new javax.swing.JComboBox<>();
        BtHomeUser = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRoom = new javax.swing.JTable();
        BtDatPhong = new javax.swing.JButton();
        LbNumber = new javax.swing.JLabel();
        InputNumber = new javax.swing.JTextField();
        LbPrice = new javax.swing.JLabel();
        InputPrice = new javax.swing.JTextField();
        LbCheckin = new javax.swing.JLabel();
        LbCheckout = new javax.swing.JLabel();
        Lbtype = new javax.swing.JLabel();
        InputType = new javax.swing.JTextField();
        CheckInTime = new com.toedter.calendar.JDateChooser();
        CheckOutTime = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BookingRoom");

        LbFindRoom.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        LbFindRoom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LbFindRoom.setText("BookingRoom");

        OptionRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Vip", "SVip", "SSVip", "SSSVip" }));
        OptionRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionRoomActionPerformed(evt);
            }
        });

        BtHomeUser.setText("Home");
        BtHomeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtHomeUserActionPerformed(evt);
            }
        });

        tableRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableRoom);

        BtDatPhong.setText("Đặt phòng");
        BtDatPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtDatPhongActionPerformed(evt);
            }
        });

        LbNumber.setText("Số phòng");

        InputNumber.setText("Số phòng");

        LbPrice.setText("Giá Tiền");

        InputPrice.setText("Giá Tiền");
        InputPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputPriceActionPerformed(evt);
            }
        });

        LbCheckin.setText("CheckIn");

        LbCheckout.setText("CheckOut");

        Lbtype.setText("Loại");

        InputType.setText("Loại");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(BtDatPhong)
                        .addGap(202, 202, 202)
                        .addComponent(BtHomeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LbFindRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(OptionRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(395, 395, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LbCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LbCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LbNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckInTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(InputNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(CheckOutTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(LbPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Lbtype, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(InputPrice)
                            .addComponent(InputType, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(LbFindRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OptionRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LbNumber)
                                    .addComponent(InputNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Lbtype)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(InputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LbPrice)
                                    .addComponent(InputPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(LbCheckin))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(CheckInTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbCheckout)
                            .addComponent(CheckOutTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtDatPhong)
                            .addComponent(BtHomeUser))
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OptionRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionRoomActionPerformed
        String option = (String)OptionRoom.getSelectedItem();
        ArrayList<Room> list = RoomDAO.getInstance().selectAll();
        tableModel.setRowCount(0);      
        for(Room r: list){
            if(option.equals("Tất cả") || r.getType().equals(option)){          
            tableModel.addRow(new Object[]{r.getId(),r.getNumber(),r.getType(),r.getPrice(),r.getStatus()});
            }
        }
    }//GEN-LAST:event_OptionRoomActionPerformed

    private void BtHomeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtHomeUserActionPerformed

        if(currentUser != null){
            if(currentUser.getName().equals("admin")){
                new HomeAdmin(currentUser);
                this.dispose();
            }
            else{
                new HomeUser(currentUser);
                this.dispose();
            }
        }
        else{
            new HomeUser(currentUser);
            System.out.println("currentUser: null");
            this.dispose();
        }

    }//GEN-LAST:event_BtHomeUserActionPerformed
    
    // Button Đặt Phòng
    private void BtDatPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtDatPhongActionPerformed
        String name = currentUser.getName();
        String number = InputNumber.getText();
        String price = InputPrice.getText();
        String type = InputType.getText();
        Bill bill = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        // Chuyển đổi từ JDateChooser sang LocalDateTime
        Date checkInDate = CheckInTime.getDate();
        Date checkOutDate = CheckOutTime.getDate();
        
        if (check(number)) {
            if(!name.isEmpty() && !number.isEmpty() && !price.isEmpty() && !type.isEmpty() && checkInDate != null && checkOutDate != null){
            // Định dạng ngày thành chuỗi
                String checkInStr = sdf.format(checkInDate);
                String checkOutStr = sdf.format(checkOutDate);

            // Chuyển chuỗi thành LocalDateTime (nếu cần)
                LocalDateTime checkIn = LocalDateTime.parse(checkInStr, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                LocalDateTime checkOut = LocalDateTime.parse(checkOutStr, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

                Booking b = new Booking(name,number,type,checkIn,checkOut,price); 
                
                
                // lưu booking vào database
                BookingDAO.getInstance().insert(b);
                JOptionPane.showMessageDialog(null, "Đặt phòng thành công!");
                // cập nhật trạng thái phòng
                RoomDAO.getInstance().updateStatus(number, "Occupied");
                // tạo bill
                bill = new Bill(checkIn,name,currentUser.getPhoneNumber(),number,type,checkIn,checkOut,price);
                
                BillDAO.getInstance().insert(bill);
                
                loadData();
                System.out.println("Dat phong thanh cong");
                InputNumber.setText("");
                InputPrice.setText("");
                InputType.setText("");
                CheckInTime.setDate(null);
                CheckOutTime.setDate(null);
                
            }
            else{
                System.out.println("Dat phong that bai!");
                JOptionPane.showMessageDialog(null, "Vui Lòng nhập đủ thông tin");   
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Phòng này không khả dụng để đặt!", "Booking", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
    }//GEN-LAST:event_BtDatPhongActionPerformed
    
    // Phương thức check trạng thái phòng
    private boolean check(String number){
        return  RoomDAO.getInstance().checkRoomAvailability(number);
    }
    
    
    private void InputPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputPriceActionPerformed
    
    // Button Chon phòng
    private void tableRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRoomMouseClicked
        int selectRow = tableRoom.getSelectedRow();
        if(selectRow != -1){
            String roomNumber = tableModel.getValueAt(selectRow,1).toString();
            InputNumber.setText(roomNumber);
            String type = tableModel.getValueAt(selectRow,2).toString();
            InputType.setText(type);
            String Price = tableModel.getValueAt(selectRow,3).toString();
            InputPrice.setText(Price);
        }
    }//GEN-LAST:event_tableRoomMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookRoom(currentUser, room);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtDatPhong;
    private javax.swing.JButton BtHomeUser;
    private com.toedter.calendar.JDateChooser CheckInTime;
    private com.toedter.calendar.JDateChooser CheckOutTime;
    private javax.swing.JTextField InputNumber;
    private javax.swing.JTextField InputPrice;
    private javax.swing.JTextField InputType;
    private javax.swing.JLabel LbCheckin;
    private javax.swing.JLabel LbCheckout;
    private javax.swing.JLabel LbFindRoom;
    private javax.swing.JLabel LbNumber;
    private javax.swing.JLabel LbPrice;
    private javax.swing.JLabel Lbtype;
    private javax.swing.JComboBox<String> OptionRoom;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableRoom;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        tableModel.setRowCount(0);
        ArrayList<Room> list = RoomDAO.getInstance().selectAll();
            for(Room r: list){
                tableModel.addRow(new Object[]{r.getId(),r.getNumber(),r.getType(),r.getPrice(),r.getStatus()});
            }
    }
}
